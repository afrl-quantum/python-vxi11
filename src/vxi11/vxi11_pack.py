# Generated by rpcgen.py from vxi11.x on Wed Jul 23 23:00:45 2008
import vxi11_const as const
import vxi11_type as types
import xdrlib
from xdrlib import Error as XDRError

class nullclass(object):
    pass

class VXI11Packer(xdrlib.Packer):
    pack_hyper = xdrlib.Packer.pack_hyper
    pack_string = xdrlib.Packer.pack_string
    pack_opaque = xdrlib.Packer.pack_opaque
    pack_int = xdrlib.Packer.pack_int
    pack_double = xdrlib.Packer.pack_double
    pack_float = xdrlib.Packer.pack_float
    pack_unsigned = xdrlib.Packer.pack_uint
    pack_quadruple = xdrlib.Packer.pack_double
    pack_uhyper = xdrlib.Packer.pack_uhyper
    pack_uint = xdrlib.Packer.pack_uint
    pack_bool = xdrlib.Packer.pack_bool
    pack_long = pack_int

    pack_Device_Link = pack_long

    def pack_Device_AddrFamily(self, data):
        if data not in [const.DEVICE_TCP, const.DEVICE_UDP]:
            raise XDRError, 'value=%s not in enum Device_AddrFamily' % data
        self.pack_int(data)

    pack_Device_Flags = pack_long

    pack_Device_ErrorCode = pack_long

    def pack_Device_Error(self, data):
        if data.error is None:
            raise TypeError, 'data.error == None'
        self.pack_Device_ErrorCode(data.error)

    def pack_Create_LinkParms(self, data):
        if data.clientId is None:
            raise TypeError, 'data.clientId == None'
        self.pack_long(data.clientId)
        if data.lockDevice is None:
            raise TypeError, 'data.lockDevice == None'
        self.pack_bool(data.lockDevice)
        if data.lock_timeout is None:
            raise TypeError, 'data.lock_timeout == None'
        self.pack_uint(data.lock_timeout)
        if data.device is None:
            raise TypeError, 'data.device == None'
        self.pack_string(data.device)

    def pack_Create_LinkResp(self, data):
        if data.error is None:
            raise TypeError, 'data.error == None'
        self.pack_Device_ErrorCode(data.error)
        if data.lid is None:
            raise TypeError, 'data.lid == None'
        self.pack_Device_Link(data.lid)
        if data.abortPort is None:
            raise TypeError, 'data.abortPort == None'
        self.pack_uint(data.abortPort)
        if data.maxRecvSize is None:
            raise TypeError, 'data.maxRecvSize == None'
        self.pack_uint(data.maxRecvSize)

    def pack_Device_WriteParms(self, data):
        if data.lid is None:
            raise TypeError, 'data.lid == None'
        self.pack_Device_Link(data.lid)
        if data.io_timeout is None:
            raise TypeError, 'data.io_timeout == None'
        self.pack_uint(data.io_timeout)
        if data.lock_timeout is None:
            raise TypeError, 'data.lock_timeout == None'
        self.pack_uint(data.lock_timeout)
        if data.flags is None:
            raise TypeError, 'data.flags == None'
        self.pack_Device_Flags(data.flags)
        if data.data is None:
            raise TypeError, 'data.data == None'
        self.pack_opaque(data.data)

    def pack_Device_WriteResp(self, data):
        if data.error is None:
            raise TypeError, 'data.error == None'
        self.pack_Device_ErrorCode(data.error)
        if data.size is None:
            raise TypeError, 'data.size == None'
        self.pack_uint(data.size)

    def pack_Device_ReadParms(self, data):
        if data.lid is None:
            raise TypeError, 'data.lid == None'
        self.pack_Device_Link(data.lid)
        if data.requestSize is None:
            raise TypeError, 'data.requestSize == None'
        self.pack_uint(data.requestSize)
        if data.io_timeout is None:
            raise TypeError, 'data.io_timeout == None'
        self.pack_uint(data.io_timeout)
        if data.lock_timeout is None:
            raise TypeError, 'data.lock_timeout == None'
        self.pack_uint(data.lock_timeout)
        if data.flags is None:
            raise TypeError, 'data.flags == None'
        self.pack_Device_Flags(data.flags)
        if data.termChar is None:
            raise TypeError, 'data.termChar == None'
        self.pack_int(data.termChar)

    def pack_Device_ReadResp(self, data):
        if data.error is None:
            raise TypeError, 'data.error == None'
        self.pack_Device_ErrorCode(data.error)
        if data.reason is None:
            raise TypeError, 'data.reason == None'
        self.pack_long(data.reason)
        if data.data is None:
            raise TypeError, 'data.data == None'
        self.pack_opaque(data.data)

    def pack_Device_ReadStbResp(self, data):
        if data.error is None:
            raise TypeError, 'data.error == None'
        self.pack_Device_ErrorCode(data.error)
        if data.stb is None:
            raise TypeError, 'data.stb == None'
        self.pack_uint(data.stb)

    def pack_Device_GenericParms(self, data):
        if data.lid is None:
            raise TypeError, 'data.lid == None'
        self.pack_Device_Link(data.lid)
        if data.flags is None:
            raise TypeError, 'data.flags == None'
        self.pack_Device_Flags(data.flags)
        if data.lock_timeout is None:
            raise TypeError, 'data.lock_timeout == None'
        self.pack_uint(data.lock_timeout)
        if data.io_timeout is None:
            raise TypeError, 'data.io_timeout == None'
        self.pack_uint(data.io_timeout)

    def pack_Device_RemoteFunc(self, data):
        if data.hostAddr is None:
            raise TypeError, 'data.hostAddr == None'
        self.pack_uint(data.hostAddr)
        if data.hostPort is None:
            raise TypeError, 'data.hostPort == None'
        self.pack_uint(data.hostPort)
        if data.progNum is None:
            raise TypeError, 'data.progNum == None'
        self.pack_uint(data.progNum)
        if data.progVers is None:
            raise TypeError, 'data.progVers == None'
        self.pack_uint(data.progVers)
        if data.progFamily is None:
            raise TypeError, 'data.progFamily == None'
        self.pack_Device_AddrFamily(data.progFamily)

    def pack_Device_EnableSrqParms(self, data):
        if data.lid is None:
            raise TypeError, 'data.lid == None'
        self.pack_Device_Link(data.lid)
        if data.enable is None:
            raise TypeError, 'data.enable == None'
        self.pack_bool(data.enable)
        if data.handle is None:
            raise TypeError, 'data.handle == None'
        if len(data.handle) > 40:
            raise XDRError, 'array length too long for data.handle'
        self.pack_opaque(data.handle)

    def pack_Device_LockParms(self, data):
        if data.lid is None:
            raise TypeError, 'data.lid == None'
        self.pack_Device_Link(data.lid)
        if data.flags is None:
            raise TypeError, 'data.flags == None'
        self.pack_Device_Flags(data.flags)
        if data.lock_timeout is None:
            raise TypeError, 'data.lock_timeout == None'
        self.pack_uint(data.lock_timeout)

    def pack_Device_DocmdParms(self, data):
        if data.lid is None:
            raise TypeError, 'data.lid == None'
        self.pack_Device_Link(data.lid)
        if data.flags is None:
            raise TypeError, 'data.flags == None'
        self.pack_Device_Flags(data.flags)
        if data.io_timeout is None:
            raise TypeError, 'data.io_timeout == None'
        self.pack_uint(data.io_timeout)
        if data.lock_timeout is None:
            raise TypeError, 'data.lock_timeout == None'
        self.pack_uint(data.lock_timeout)
        if data.cmd is None:
            raise TypeError, 'data.cmd == None'
        self.pack_long(data.cmd)
        if data.network_order is None:
            raise TypeError, 'data.network_order == None'
        self.pack_bool(data.network_order)
        if data.datasize is None:
            raise TypeError, 'data.datasize == None'
        self.pack_long(data.datasize)
        if data.data_in is None:
            raise TypeError, 'data.data_in == None'
        self.pack_opaque(data.data_in)

    def pack_Device_DocmdResp(self, data):
        if data.error is None:
            raise TypeError, 'data.error == None'
        self.pack_Device_ErrorCode(data.error)
        if data.data_out is None:
            raise TypeError, 'data.data_out == None'
        self.pack_opaque(data.data_out)

    def pack_Device_SrqParms(self, data):
        if data.handle is None:
            raise TypeError, 'data.handle == None'
        self.pack_opaque(data.handle)

class VXI11Unpacker(xdrlib.Unpacker):
    unpack_hyper = xdrlib.Unpacker.unpack_hyper
    unpack_string = xdrlib.Unpacker.unpack_string
    unpack_opaque = xdrlib.Unpacker.unpack_opaque
    unpack_int = xdrlib.Unpacker.unpack_int
    unpack_double = xdrlib.Unpacker.unpack_double
    unpack_float = xdrlib.Unpacker.unpack_float
    unpack_unsigned = xdrlib.Unpacker.unpack_uint
    unpack_quadruple = xdrlib.Unpacker.unpack_double
    unpack_uhyper = xdrlib.Unpacker.unpack_uhyper
    unpack_uint = xdrlib.Unpacker.unpack_uint
    unpack_bool = xdrlib.Unpacker.unpack_bool
    unpack_long = unpack_int

    unpack_Device_Link = unpack_long

    def unpack_Device_AddrFamily(self):
        data = self.unpack_int()
        if data not in [const.DEVICE_TCP, const.DEVICE_UDP]:
            raise XDRError, 'value=%s not in enum Device_AddrFamily' % data
        return data

    unpack_Device_Flags = unpack_long

    unpack_Device_ErrorCode = unpack_long

    def unpack_Device_Error(self):
        data = types.Device_Error()
        data.error = self.unpack_Device_ErrorCode()
        return data

    def unpack_Create_LinkParms(self):
        data = types.Create_LinkParms()
        data.clientId = self.unpack_long()
        data.lockDevice = self.unpack_bool()
        data.lock_timeout = self.unpack_uint()
        data.device = self.unpack_string()
        return data

    def unpack_Create_LinkResp(self):
        data = types.Create_LinkResp()
        data.error = self.unpack_Device_ErrorCode()
        data.lid = self.unpack_Device_Link()
        data.abortPort = self.unpack_uint()
        data.maxRecvSize = self.unpack_uint()
        return data

    def unpack_Device_WriteParms(self):
        data = types.Device_WriteParms()
        data.lid = self.unpack_Device_Link()
        data.io_timeout = self.unpack_uint()
        data.lock_timeout = self.unpack_uint()
        data.flags = self.unpack_Device_Flags()
        data.data = self.unpack_opaque()
        return data

    def unpack_Device_WriteResp(self):
        data = types.Device_WriteResp()
        data.error = self.unpack_Device_ErrorCode()
        data.size = self.unpack_uint()
        return data

    def unpack_Device_ReadParms(self):
        data = types.Device_ReadParms()
        data.lid = self.unpack_Device_Link()
        data.requestSize = self.unpack_uint()
        data.io_timeout = self.unpack_uint()
        data.lock_timeout = self.unpack_uint()
        data.flags = self.unpack_Device_Flags()
        data.termChar = self.unpack_int()
        return data

    def unpack_Device_ReadResp(self):
        data = types.Device_ReadResp()
        data.error = self.unpack_Device_ErrorCode()
        data.reason = self.unpack_long()
        data.data = self.unpack_opaque()
        return data

    def unpack_Device_ReadStbResp(self):
        data = types.Device_ReadStbResp()
        data.error = self.unpack_Device_ErrorCode()
        data.stb = self.unpack_uint()
        return data

    def unpack_Device_GenericParms(self):
        data = types.Device_GenericParms()
        data.lid = self.unpack_Device_Link()
        data.flags = self.unpack_Device_Flags()
        data.lock_timeout = self.unpack_uint()
        data.io_timeout = self.unpack_uint()
        return data

    def unpack_Device_RemoteFunc(self):
        data = types.Device_RemoteFunc()
        data.hostAddr = self.unpack_uint()
        data.hostPort = self.unpack_uint()
        data.progNum = self.unpack_uint()
        data.progVers = self.unpack_uint()
        data.progFamily = self.unpack_Device_AddrFamily()
        return data

    def unpack_Device_EnableSrqParms(self):
        data = types.Device_EnableSrqParms()
        data.lid = self.unpack_Device_Link()
        data.enable = self.unpack_bool()
        data.handle = self.unpack_opaque()
        if len(data.handle) > 40:
            raise XDRError, 'array length too long for data.handle'
        return data

    def unpack_Device_LockParms(self):
        data = types.Device_LockParms()
        data.lid = self.unpack_Device_Link()
        data.flags = self.unpack_Device_Flags()
        data.lock_timeout = self.unpack_uint()
        return data

    def unpack_Device_DocmdParms(self):
        data = types.Device_DocmdParms()
        data.lid = self.unpack_Device_Link()
        data.flags = self.unpack_Device_Flags()
        data.io_timeout = self.unpack_uint()
        data.lock_timeout = self.unpack_uint()
        data.cmd = self.unpack_long()
        data.network_order = self.unpack_bool()
        data.datasize = self.unpack_long()
        data.data_in = self.unpack_opaque()
        return data

    def unpack_Device_DocmdResp(self):
        data = types.Device_DocmdResp()
        data.error = self.unpack_Device_ErrorCode()
        data.data_out = self.unpack_opaque()
        return data

    def unpack_Device_SrqParms(self):
        data = types.Device_SrqParms()
        data.handle = self.unpack_opaque()
        return data

